package org.kh.first.member.controller;

import java.io.File;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.kh.first.member.model.service.MemberService;
import org.kh.first.member.model.vo.Member;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class MemberController {
	//MemberService DI 처리
	@Autowired
	private MemberService memberService;
	@RequestMapping(value="login.do", method=RequestMethod.POST)
	//method 매개변수로 선언하면 자동으로 생성됨 : HttpSession
	public String loginMethod(Member member, HttpSession session, SessionStatus status, Model model) {
		Member loginMember = memberService.selectLogin(member);
		if(loginMember != null) {
			session.setAttribute("loginMember", loginMember);
			status.setComplete(); //요청 성공
			
			return "home";
		} else {
			//로그인 실패
			model.addAttribute("message", "로그인실패");
			return "common/error";
		}
	}
	
	@RequestMapping("logout.do")
	public String logoutMethod(HttpServletRequest request) {
		HttpSession session = request.getSession(false);
		if(session != null)
			session.invalidate();
		
		return "home";
	}
	
	@RequestMapping("enroll.do")
	public String moveEnrollPage() {
		return "member/enrollPage";
	}
	
	@RequestMapping(value="minsert.do", method=RequestMethod.POST)
	public String insertMember
		(Member member, @RequestParam(name="photo", required=false) MultipartFile mphoto, HttpServletRequest request, Model model) {
		//MultipartFile mphoto = new MultipartFile(mrequest.getParameter("photo"));
		// --> @RequestParam(name="photo") MultipartFile mphoto
		//required=false : null처리
		System.out.println("member : " + member);
		System.out.println("프로필 사진 : "+ mphoto);
		
		//전송받은 파일을 files폴더에 저장하기
		String savePath = request.getSession().getServletContext().getRealPath("resources/files/photo");
		try {
			if(mphoto != null)
				mphoto.transferTo(new File(savePath + "\\" + mphoto.getOriginalFilename()));
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		if(memberService.insertMember(member) > 0)
			return "home";
		else {
			model.addAttribute("message", "회원가입실패");
			return "common/error";
		}
	}
	@RequestMapping("myinfo.do")
	public ModelAndView selectMember(ModelAndView mav, @RequestParam(name="userid") String userid) {
		//ModelAndView mav = new ModelAndView();
		
		Member member = memberService.selectMember(userid);
		
		mav.addObject("member", member); //request.setAttribute("member", member);
		mav.setViewName("member/memberDetailView");
		return mav;
	}
	
	@RequestMapping("mdel.do")
	public String memberDelete(Model model, @RequestParam(name="userid") String userid) {
		int result = memberService.deleteMember(userid);
		
		if(result > 0)
			return "redirect:logout.do";
		else {
			model.addAttribute("message", "탈퇴 실패함");
			return "common/error";
		}
	}
	
	@RequestMapping("mupview.do")
	public ModelAndView updateMember(ModelAndView mav, @RequestParam(name="userid") String userid) {
		
		Member member = memberService.selectMember(userid);
		
		mav.addObject("member", member);
		mav.setViewName("member/memberUpdatePage");
		if(member != null) 
			return mav;
		else {
			mav.addObject("message", "정보수정 실패");
			mav.setViewName("common/error");
		}
	}
}
