/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-03-24 23:44:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".styled-checkbox {\r\n");
      out.write("  position: absolute; // take it out of document flow\r\n");
      out.write("  opacity: 0; // hide it\r\n");
      out.write("\r\n");
      out.write("  & + label {\r\n");
      out.write("    position: relative;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Box.\r\n");
      out.write("  & + label:before {\r\n");
      out.write("    content: '';\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    vertical-align: text-top;\r\n");
      out.write("    width: 20px;\r\n");
      out.write("    height: 20px;\r\n");
      out.write("    background: white;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Box hover\r\n");
      out.write("  &:hover + label:before {\r\n");
      out.write("    background: #f35429;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  // Box focus\r\n");
      out.write("  &:focus + label:before {\r\n");
      out.write("    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.12);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Box checked\r\n");
      out.write("  &:checked + label:before {\r\n");
      out.write("    background: #f35429;\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  // Disabled state label.\r\n");
      out.write("  &:disabled + label {\r\n");
      out.write("    color: #b8b8b8;\r\n");
      out.write("    cursor: auto;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Disabled box.\r\n");
      out.write("  &:disabled + label:before {\r\n");
      out.write("    box-shadow: none;\r\n");
      out.write("    background: #ddd;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // Checkmark. Could be replaced with an image\r\n");
      out.write("  &:checked + label:after {\r\n");
      out.write("    content: '';\r\n");
      out.write("    position: absolute;\r\n");
      out.write("    left: 5px;\r\n");
      out.write("    top: 9px;\r\n");
      out.write("    background: white;\r\n");
      out.write("    width: 2px;\r\n");
      out.write("    height: 2px;\r\n");
      out.write("    box-shadow: \r\n");
      out.write("      2px 0 0 white,\r\n");
      out.write("      4px 0 0 white,\r\n");
      out.write("      4px -2px 0 white,\r\n");
      out.write("      4px -4px 0 white,\r\n");
      out.write("      4px -6px 0 white,\r\n");
      out.write("      4px -8px 0 white;\r\n");
      out.write("    transform: rotate(45deg);\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Demo-only styles\r\n");
      out.write("// --------------\r\n");
      out.write("\r\n");
      out.write("html {\r\n");
      out.write("  background: lightgray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("  font-family: 'Source Sans Pro', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".unstyled {\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0;\r\n");
      out.write("  list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li {\r\n");
      out.write("  margin: 20px 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".centered {\r\n");
      out.write("  width: 300px;\r\n");
      out.write("  margin: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".title {\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  color: rgb(69, 113, 236);\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<ul class=\"unstyled centered\">\r\n");
      out.write("  <li>\r\n");
      out.write("    <input class=\"styled-checkbox\" id=\"styled-checkbox-1\" type=\"checkbox\" value=\"value1\">\r\n");
      out.write("    <label for=\"styled-checkbox-1\">Checkbox</label>\r\n");
      out.write("  </li>\r\n");
      out.write("  <li>\r\n");
      out.write("    <input class=\"styled-checkbox\" id=\"styled-checkbox-2\" type=\"checkbox\" value=\"value2\" checked>\r\n");
      out.write("    <label for=\"styled-checkbox-2\">CSS Only</label>\r\n");
      out.write("  </li>\r\n");
      out.write("  <li>\r\n");
      out.write("    <input class=\"styled-checkbox\" id=\"styled-checkbox-3\" type=\"checkbox\" value=\"value3\" disabled>\r\n");
      out.write("    <label for=\"styled-checkbox-3\">A disabled checkbox</label>\r\n");
      out.write("  </li>\r\n");
      out.write("  <li>\r\n");
      out.write("    <input class=\"styled-checkbox\" id=\"styled-checkbox-4\" type=\"checkbox\" value=\"value4\">\r\n");
      out.write("    <label for=\"styled-checkbox-4\">Fourth option</label>\r\n");
      out.write("  </li>\r\n");
      out.write("</ul>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
